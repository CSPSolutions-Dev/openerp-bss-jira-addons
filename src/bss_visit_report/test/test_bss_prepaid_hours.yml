#TODO: Add project to timesheet
#      Convert user_id and employee_id to xml ids

-
  In order to test the Prepaid Hours part of Vist Report module,
-
  I create a contract with Prepaid hours management activated
-
  !record {model: account.analytic.account, id: contract_0}:
    user_id: 1
    name: Test contract
    type: contract
    use_tasks: True
    use_prepaid_hours: True
    use_timesheets: True

-
  I check the state of the contract
-
  !assert {model: account.analytic.account, id: contract_0}:
    - state == "open"
    
-
  I check if Prepaid hours object is created
-
  !assert {model: account.analytic.account, id: contract_0}:
    - prepaid_hours_id != False
    
-
  I check correct initialization of prepaid hours object
-
  !python {model: bss_visit_report.prepaid_hours}: |
    pph_id = self.search(cr, uid, [('contract_id','=',ref('contract_0'))])
    pph = self.browse(cr, uid, pph_id)[0]
    contract = self.pool.get('account.analytic.account').browse(cr, uid, ref('contract_0'))
    
    assert pph.pph_name == contract.name, "Bad prepaid hours name (bad relation ?)"
    assert pph.total_validated_hours == 0, "Bad init value for validated hours"
    assert pph.total_added_hours == 0, "Bad init value for added hours"
    assert pph.av_amount == 0, "Bad init value for available amount"
    
-
  I add 10 hours to current prepaid hours
-
  !python {model: bss_visit_report.prepaid_hours.add_hours}: |
    import time
    pph_id = self.pool.get('bss_visit_report.prepaid_hours').search(cr, uid, [('contract_id','=',ref('contract_0'))])[0]
    id = self.create(cr, uid, {'amount': 600, 'processed_date': time.strftime('%Y-%m-%d'), 'prepaid_hours_id': pph_id})
    self.execute(cr, uid, [id])
    
-
  I check if hours were added properly
-
  !python {model: bss_visit_report.prepaid_hours}: |
    pph_id = self.search(cr, uid, [('contract_id','=',ref('contract_0'))])
    pph = self.browse(cr, uid, pph_id)[0]
    
    assert pph.total_added_hours == 600, "Bad value for added hours"
    assert pph.total_validated_hours == 0, "Bad value for validated hours"
    assert pph.av_amount == 600, "Bad value for available amount"
    
-
  In order to check correct validated and deductable hours
-
  I create a project
-
  !record {model: project.project, id: project_0}:
    name: Test project
    user_id: 1
    analytic_account_id: contract_0
    
-
  I create a task
-
  !record {model: project.task, id: task_0}:
    name: Test task
    project_id: project_0
    user_id: 1
    description: test description
    
-
  I do a 1 hour work on the task
-
  !record {model: project.task.work, id: task_work_0}:
    name: Work on it
    hours: 1.0
    user_id: 1
    task_id: task_0

-
  I close the task
-
  !python {model: project.task}: |
    self.do_close(cr, uid, ref('task_0'))
    
-
  I create a visit report
-
  !record {model: bss_visit_report.visit, id: visit_report_0}:
    project_id: project_0
    user_id: 1
    date: '2013-04-15'
    
-
  I create a timesheet sheet
-
  !record {model: hr_timesheet_sheet.sheet, id: sheet_0}:
    employee_id: 1
    date_from: '2013-04-15'
    date_to: '2013-04-21'

-
  I submit the sheet to the manager
-
  !python {model: hr_timesheet_sheet.sheet}: |
    self.button_confirm(cr, uid, [ref('sheet_0')])

-
  I check if billable hours are added but not validated
-
  !python {model: bss_visit_report.prepaid_hours}: |
    pph_id = self.search(cr, uid, [('contract_id','=',ref('contract_0'))])
    pph = self.browse(cr, uid, pph_id)[0]
    
    assert len(pph.billable_hours) == 1, "Hours not added"
    assert pph.total_validated_hours == 0, "Validated hours amount not valid"
    assert pph.av_amount == 600, "Available amount not valid"

-
  I refuse the sheet
-
  !python {model: hr_timesheet_sheet.sheet}: |
    self.prepaid_draft(cr, uid, [ref('sheet_0')])

-
  I check if billable hours are removed
-
  !python {model: bss_visit_report.prepaid_hours}: |
    pph_id = self.search(cr, uid, [('contract_id','=',ref('contract_0'))])
    pph = self.browse(cr, uid, pph_id)[0]
    
    assert len(pph.billable_hours) == 0, "Hours not added"
    assert pph.total_validated_hours == 0, "Validated hours amount not valid"
    assert pph.av_amount == 600, "Available amount not valid"
    
-
  I submit again the sheet to the manager
-
  !python {model: hr_timesheet_sheet.sheet}: |
    self.button_confirm(cr, uid, [ref('sheet_0')])
    
-
  I accept the sheet
-
  !python {model: hr_timesheet_sheet.sheet}: |
    self.prepaid_validate(cr, uid, [ref('sheet_0')])
    
-
  I check if billable are validated and correct related amounts
-
  !python {model: bss_visit_report.prepaid_hours}: |
    pph_id = self.search(cr, uid, [('contract_id','=',ref('contract_0'))])
    pph = self.browse(cr, uid, pph_id)[0]
    
    assert len(pph.billable_hours) == 1, "Hours not added"
    assert pph.total_validated_hours == 60, "Validated hours amount not valid"
    assert pph.av_amount == 540, "Available amount not valid"
    
-
  I put back the sheet in draft mode
-
  !python {model: hr_timesheet_sheet.sheet}: |
    self.prepaid_draft(cr, uid, [ref('sheet_0')])
    
-
  I check if billable hours are removed and correct related amounts
-
  !python {model: bss_visit_report.prepaid_hours}: |
    pph_id = self.search(cr, uid, [('contract_id','=',ref('contract_0'))])
    pph = self.browse(cr, uid, pph_id)[0]
    
    assert len(pph.billable_hours) == 0, "Hours not added"
    assert pph.total_validated_hours == 0, "Validated hours amount not valid"
    assert pph.av_amount == 600, "Available amount not valid"
    